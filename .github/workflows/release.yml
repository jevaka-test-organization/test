name: Release

on:
  create:
  check_run:
    types:
      - completed
  pull_request_review:
    types:
      - submitted

jobs:
  always-runs:
    runs-on: ubuntu-latest
    steps:
      - name: Output github
        run: |
          echo $(jq '.' $GITHUB_EVENT_PATH)

  create:
    if: startsWith(github.ref, 'refs/heads/release/')
    runs-on: ubuntu-latest
    steps:
      - name: Validate CHANGELOG.md
        id: validate_changelog
        run: |
          echo "Validate CHANGELOG.md"
          echo "::set-env name=NEW_RELEASE_VERSION::$(echo 1.2.3)"

      - name: Freeze develop and master branches
        run: echo "Freeze branches"

      - name: Update version files
        run: echo "Modify CHANGELOG.md, package.json, package-lock.json with new release version"

      - name: Create release commit
        run: echo "Add version files, commit -m 'Release ${NEW_RELEASE_VERSION}'"

      - name: Create pull request to master
        run: echo "Open PR to master"

  merge:
    if: startsWith(github.event.pull_request.head.ref, 'release/') &&
      !github.event.pull_request.closed_at &&
      !github.event.pull_request.merged
    runs-on: ubuntu-latest
    steps:

# github.event.pull_request exists on pull_request_review
# github.event.check_suite exists on check_suite completed

      - name: Check if pull request is mergeable
        run: |
          PR_REVIEWS=$(
            curl \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              ${{ github.event.pull_request.url }}/reviews |
            jq '.[] |= { login: .user.login, state: .state } | reverse | unique_by( .login )'
          )

          PR_APPROVALS=$(
            echo ${PR_REVIEWS} |
            jq '[.[] | select( .state == "APPROVED" )] | length'
          )
          echo "::info ::This pull request has ${PR_APPROVALS} approvals"

          PR_CHANGE_REQUESTS=$(
            echo ${PR_REVIEWS} |
            jq '[.[] | select( .state == "CHANGES_REQUESTED" )] | length'
          )
          echo "::info ::This pull request has ${PR_CHANGE_REQUESTS} reviewers requesting changes"

          if [ ${PR_APPROVALS} -lt 1 ] || [ ${PR_CHANGE_REQUESTS} -gt 0 ]; then
            echo "::error ::Failed to meet pull request approval conditions"
            exit 1
          fi

          curl -H "Authorization: bearer $(git config github.token)" -X POST -d "
            {
              \"query\": \"query { \
                organization(login: \\\"${{ github.event.pull_request.organization.login }}\\\") { \
                  repository(name: \\\"${{ github.event.pull_request.base.ref }}\\\") { \
                    branchProtectionRules(first: 100) { \
                      nodes { \
                        requiredStatusCheckContexts \
                        matchingRefs(first:100) { \
                          nodes { \
                            name, \
                          } \
                        } \
                      } \
                    } \
                  } \
                } \
              }\"
            }
            " https://api.github.com/graphql

          REQUIRED_STATUS_CHECKS=$(
            curl -H "Authorization: bearer $(git config github.token)" -X POST -d "
              {
                \"query\": \"query { \
                  organization(login: \\\"${{ github.event.pull_request.organization.login }}\\\") { \
                    repository(name: \\\"${{ github.event.pull_request.base.ref }}\\\") { \
                      branchProtectionRules(first: 100) { \
                        nodes { \
                          requiredStatusCheckContexts \
                          matchingRefs(first:100) { \
                            nodes { \
                              name, \
                            } \
                          } \
                        } \
                      } \
                    } \
                  } \
                }\"
              }
              " https://api.github.com/graphql |
            jq '.data.organization.repository.branchProtectionRules.nodes | .[] | select(.matchingRefs.nodes[].name == "master").requiredStatusCheckContexts'
          )

          echo REQUIRED_STATUS_CHECKS: ${REQUIRED_STATUS_CHECKS}

          STATUS_CHECKS=$(
            curl \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github.antiope-preview+json" \
              ${{ github.event.pull_request.head.repo.url }}/commits/${{ github.event.pull_request.head.sha }}/check-runs |
            jq ".check_runs | [.[] |= { name: .name, status: .status, conclusion: .conclusion } | unique_by( .name )[] | select( .name == (${REQUIRED_STATUS_CHECKS}[]) )]"
          )

          echo STATUS_CHECKS: ${STATUS_CHECKS}

          STATUS_CHECKS_SUCCEEDED=$(
            echo ${STATUS_CHECKS} |
            jq '[.[] | select( .conclusion == "success" )] | length'
          )
          echo "::info ::This pull request has ${STATUS_CHECKS_SUCCEEDED} successful checks"

          echo STATUS_CHECKS_SUCCEEDED: ${STATUS_CHECKS_SUCCEEDED}

          STATUS_CHECKS_INCOMPLETE=$(
            echo ${STATUS_CHECKS} |
            jq '[.[] | select( .status != "completed" )] | length'
          )
          echo "::info ::This pull request has ${STATUS_CHECKS_INCOMPLETE} incomplete checks"

          echo STATUS_CHECKS_INCOMPLETE: ${STATUS_CHECKS_INCOMPLETE}

          STATUS_CHECKS_FAILED=$(
            echo ${STATUS_CHECKS} |
            jq '[.[] | select( .conclusion == "failure" )] | length'
          )
          echo "::info ::This pull request has ${STATUS_CHECKS_FAILED} failed checks"

          echo STATUS_CHECKS_FAILED: ${STATUS_CHECKS_FAILED}

          if [ ${STATUS_CHECKS_INCOMPLETE} -gt 0 ] || [ ${STATUS_CHECKS_FAILED} -gt 0 ]; then
            echo "::error ::Failed to meet check status conditions"
            exit 1
          fi

      - name: Merge into master
        run: echo "Merge into master"

      - name: Publish release
        run: echo "Publish release"

      - name: Create pull request from master to develop
        run: echo "Open PR from master to develop"

      - name: Auto-approve PR
        run: echo "Approve PR from master to develop"

      - name: Merge master into develop
        run: echo "Merge master into develop"

      - name: Create meta/stub-version-next_minor_version-alpha
        run: |
          echo "Create alpha stub branch (major.minor+1.0)"
          echo "::set-env name=ALPHA_STUB_VERSION::$(echo 1.3.0-alpha)"

      - name: Update version files
        run: echo "Modify CHANGELOG.md, package.json, package-lock.json with alpha version"

      - name: Create alphastub commit
        run: echo "Add version files, commit -m 'Stub version ${ALPHA_STUB_VERSION}'"

      - name: Create pull request from alphastub to develop
        run: echo "Open PR from alphastub to develop"

      - name: Auto-approve PR
        run: echo "Approve PR from alphastub to develop"

      - name: Merge alphastub into develop
        run: echo "Merge master into develop"

      - name: Unfreeze develop and master branches
        run: echo "Unfreeze branches"
